apiVersion: apps/v1
kind: Deployment
metadata:
  name: application-service
  namespace: rental-platform
  labels:
    app: application-service
    component: backend
    environment: production
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3003"
    prometheus.io/path: "/metrics"
    seccomp.security.alpha.kubernetes.io/pod: "runtime/default"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: application-service
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  template:
    metadata:
      labels:
        app: application-service
        component: backend
        environment: production
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3003"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: application-service-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      initContainers:
        - name: init-db
          image: projectx/db-check:latest
          imagePullPolicy: IfNotPresent
          command: ['sh', '-c', 'until nc -z $DB_HOST $DB_PORT; do echo waiting for database; sleep 2; done;']
          envFrom:
            - configMapRef:
                name: application-service-config
            - secretRef:
                name: database-secrets
      containers:
        - name: application-service
          image: projectx/application-service:latest
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          envFrom:
            - configMapRef:
                name: application-service-config
            - secretRef:
                name: database-secrets
            - secretRef:
                name: elasticsearch-secrets
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: config
              mountPath: /app/config
              readOnly: true
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /startup
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            failureThreshold: 30
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "sleep 10"]
      volumes:
        - name: tmp
          emptyDir: {}
        - name: config
          configMap:
            name: application-service-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - application-service
                topologyKey: kubernetes.io/hostname
      nodeSelector:
        kubernetes.io/os: linux
        node-type: application
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      terminationGracePeriodSeconds: 60